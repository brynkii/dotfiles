#!/bin/bash

# Temporary file to store the selected directory
TEMP_FILE="/tmp/fzf_selected_dir"
HIST_FILE="$HOME/.local/share/fcd/fcd.history"
EXCLUDE_FILE="$HOME/.local/share/fcd/fcd.exclude"
HOME_CACHE_FILE="$HOME/.local/share/fcd/home_cache.txt"
ROOT_CACHE_FILE="$HOME/.local/share/fcd/root_cache.txt"
LOG_FILE="$HOME/.local/share/fcd/cache_update.log"  # Log file for cache updates

# Ensure necessary files exist
touch "$HIST_FILE"
touch "$EXCLUDE_FILE"
touch "$HOME_CACHE_FILE"
touch "$ROOT_CACHE_FILE"
touch "$LOG_FILE"  # Create log file if it doesn't exist

# Function to generate exclude arguments for find
generate_exclude_args() {
    local args=()
    while read -r line; do
        args+=("-not" "-path" "$line")
    done < "$EXCLUDE_FILE"
    echo "${args[@]}"
}

# Function to dynamically switch between search modes
dynamic_search() {
    local cache_file
    local search_path

    # Determine cache file and search path
    if [[ "$1" == "home" ]]; then
        cache_file="$HOME_CACHE_FILE"
        search_path="$HOME"
    elif [[ "$1" == "root" ]]; then
        cache_file="$ROOT_CACHE_FILE"
        search_path="/"
    fi

    # Check if the cache exists, is valid, and not empty
    if [[ -f "$cache_file" && -s "$cache_file" && ! $(find "$cache_file" -mmin +5) ]]; then
        # Use cached results immediately if valid and not empty
        SELECTED_DIR=$(fzf --prompt="Select a directory: " --height=20 --reverse \
            --preview 'eza -l --tree --total-size --color=always --no-time --no-permissions --no-user {}' \
            --bind "ctrl-h:reload(cat '$HOME_CACHE_FILE')" \
            --bind "ctrl-s:reload(cat '$HIST_FILE' | sort -u)" \
            --bind "ctrl-r:reload(cat '$ROOT_CACHE_FILE')" \
            --header 'Ctrl-H: Home Search | Ctrl-S: History Search | Ctrl-R: Root Search' < "$cache_file")
    else
        # If no valid cache or empty cache, perform a fresh search and cache the result
                find "$search_path" -type d $(generate_exclude_args) 2>/dev/null > "$cache_file"

        # Now display the directories with fzf
        SELECTED_DIR=$(fzf --prompt="Select a directory: " --height=20 --reverse \
            --preview 'eza -l --tree --total-size --color=always --no-time --no-permissions --no-user {}' \
            --bind "ctrl-h:reload(find $HOME -type d $(generate_exclude_args) 2>/dev/null)" \
            --bind "ctrl-s:reload(cat '$HIST_FILE' | sort -u)" \
            --bind "ctrl-r:reload(find / -maxdepth 5 -type d 2>/dev/null)" \
            --header 'Ctrl-H: Home Search | Ctrl-S: History Search | Ctrl-R: Root Search' < "$cache_file")

        # Update the cache in the background if directories are found
        if [[ -n "$SELECTED_DIR" ]]; then
            update_cache "$cache_file" "$search_path" &
        fi
    fi
}

# Function to update the cache manually
update_cache() {
    local cache_file="$1"
    local search_path="$2"

    # Update the cache
    find "$search_path" -type d $(generate_exclude_args) 2>/dev/null > "$cache_file"
    
    # Notify user that the cache update is complete
    notify-send "Cache Update Complete" "The directory cache has been updated for $search_path."
    
    # Log the cache update
    echo "$(date) - Cache updated for $search_path" >> "$LOG_FILE"

    echo "Cache update complete for $search_path."
}

# Function to clean up history
cleanup_history() {
    echo "Cleaning up history file..."
    local temp_file
    temp_file=$(mktemp)
    while read -r dir; do
        if [[ -d "$dir" ]]; then
            echo "$dir" >> "$temp_file"
        fi
    done < "$HIST_FILE"
    mv "$temp_file" "$HIST_FILE"
    echo "History cleanup complete."
}

# Function to display statistics
show_statistics() {
    local total_dirs
    total_dirs=$(wc -l < "$HIST_FILE")
    local unique_dirs
    unique_dirs=$(sort -u "$HIST_FILE" | wc -l)
    echo "Total directories in history: $total_dirs"
    echo "Unique directories in history: $unique_dirs"
}

# Function to display help
show_help() {
    echo "Usage: $(basename "$0") [OPTION]"
    echo "Options:"
    echo "  --stats, -s          Show history statistics"
    echo "  --cleanup, -c        Clean up history file"
    echo "  --update-cache, -u   Manually update the cache"
    echo "  --help, -h           Show this help message"
    echo "  [no option]          Default to dynamic directory search"
}

# Parse arguments
case "$1" in
    --cleanup|-c)
        cleanup_history
        exit 0
        ;;
    --stats|-s)
        show_statistics
        exit 0
        ;;
    --update-cache|-u)
        update_cache "$HOME_CACHE_FILE" "$HOME"
        update_cache "$ROOT_CACHE_FILE" "/"
        exit 0
        ;;
    --help|-h)
        show_help
        exit 0
        ;;
    *)
        # Use dynamic search for both home and root
        dynamic_search "home"
        ;;
esac

# If a valid directory is selected, write to the temp file and append to history
# If it's already absolute, use it as-is
if [[ "$SELECTED_DIR" = /* ]]; then
    ABS_DIR="$SELECTED_DIR"
else
    ABS_DIR="$(pwd)/$SELECTED_DIR"
fi

# Confirm it's a valid directory
if [[ -d "$ABS_DIR" && -r "$ABS_DIR" ]]; then
    echo "$ABS_DIR" > "$TEMP_FILE"
    echo "$ABS_DIR" >> "$HIST_FILE"
else
    echo "Invalid or inaccessible directory: $SELECTED_DIR"
    true > "$TEMP_FILE"
fi

