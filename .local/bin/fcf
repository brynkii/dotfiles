#!/bin/bash

# Ensure fzf is installed
if ! command -v fzf &> /dev/null; then
    echo "fzf is not installed. Please install it before running this script."
    exit 1
fi

# Directory for logs, cache, and saved files
DATA_DIR="$HOME/.local/share/fzf-files"
SELECTIONS_LOG="$DATA_DIR/selections.log"
COPIED_LOG="$DATA_DIR/copied.log"
HOME_CACHE="$DATA_DIR/home_cache.txt"
ROOT_CACHE="$DATA_DIR/root_cache.txt"

# Define directories to exclude
EXCLUDE_DIRS=".git,.cache,node_modules"

# Create necessary directories
mkdir -p "$DATA_DIR"

# Help function
show_help() {
    echo "Usage: fcf [OPTIONS]"
    echo "Options:"
    echo "  -h, --help   Show this help message."
    echo "  -u, --update Update the cache for both root and home directories."
    echo "  -d DEST_DIR  Specify a destination directory to copy files to (default is current directory)."
    echo "  -e, --exclude-dirs  Comma-separated list of directories to exclude from the search."
    exit 0
}

# Function to list previous selections
list_previous_selections() {
    if [[ ! -s "$SELECTIONS_LOG" ]]; then
        echo "No previous selections found."
        exit 0
    fi

    echo "Select a file from previous selections:"
    SELECTED=$(fzf --prompt="Select a file: " --preview="batcat --color=always --style=plain {} 2>/dev/null || head -n 20 {}" --preview-window=up:10 < "$SELECTIONS_LOG")

    if [[ -n "$SELECTED" ]]; then
        echo "You selected: $SELECTED"
    else
        echo "No file selected."
    fi
    exit 0
}

# Function to update the cache
update_cache() {
    local search_path="$1"
    local cache_file="$2"
    echo "Updating cache for: $search_path..."
    local find_cmd="find $search_path -type f"
    for dir in $(echo "$EXCLUDE_DIRS" | tr ',' '\n'); do
        find_cmd+=" ! -path '*/$dir/*'"
    done
    echo "$search_path" > "$cache_file"
    eval "$find_cmd" 2>/dev/null >> "$cache_file"
    echo "Cache updated at: $cache_file"
}

# Update all caches
update_all_caches() {
    update_cache "$HOME" "$HOME_CACHE"
    update_cache "/" "$ROOT_CACHE"
}

# Function to handle file name collisions
handle_name_collision() {
    local file_path="$1"
    local dest_dir="$2"
    local base_name
    base_name=$(basename "$file_path")
    local extension="${base_name##*.}"
    local file_name="${base_name%.*}"
    local counter=1

    while [[ -e "$dest_dir/$base_name" ]]; do
        base_name="${file_name}_$counter.$extension"
        ((counter++))
    done

    echo "$base_name"
}

# Default destination directory
DEST_DIR="$PWD"

# Parse options
UPDATE_CACHE=false
while [[ "$1" != "" ]]; do
    case "$1" in
        -d)
            shift
            DEST_DIR="$1"
            ;;
        -h|--help)
            show_help
            ;;
        -l|--list)
            list_previous_selections
            ;;
        -u|--update)
            UPDATE_CACHE=true
            ;;
        -e|--exclude-dirs)
            EXCLUDE_DIRS="$1"
            ;;
        *)
            echo "Invalid option: $1"
            show_help
            ;;
    esac
    shift
done

# Ensure the destination directory exists
if [ ! -d "$DEST_DIR" ]; then
    echo "Destination directory '$DEST_DIR' does not exist. Creating it..."
    if ! mkdir -p "$DEST_DIR"; then
        echo "Failed to create destination directory. Exiting."
        exit 1
    fi
fi

# Update cache if requested
if $UPDATE_CACHE; then
    update_all_caches
fi

# Ensure both caches exist
if [[ ! -f "$HOME_CACHE" ]] || [[ ! -f "$ROOT_CACHE" ]]; then
    echo "Caches are missing. Updating both caches..."
    update_all_caches
fi

# Launch fzf for selection (defaulting to Home cache)
fzf_combined_content() {
    tail -n +2 "$HOME_CACHE" | fzf --multi --prompt="Select files: " \
        --bind "ctrl-h:reload(cat $HOME_CACHE | tail -n +2),ctrl-r:reload(cat $ROOT_CACHE | tail -n +2),ctrl-s:reload(cat $SELECTIONS_LOG),ctrl-c:abort" \
        --preview="batcat --color=always --style=plain {} 2>/dev/null || head -n 20 {}" \
        --preview-window=up:10 \
        --header="Ctrl-H: Home (Default), Ctrl-R: Root, Ctrl-S: History, Ctrl-C: Exit"
}

# Execute fzf to select files
SELECTED_FILES=$(fzf_combined_content)

# Exit if no files are selected
if [ -z "$SELECTED_FILES" ]; then
    echo "No files selected. Exiting."
    exit 0
fi

# Save selections to log
echo "$SELECTED_FILES" >> "$SELECTIONS_LOG"

echo "Selected files:" > "$COPIED_LOG"

# Copy selected files to the destination directory
echo "Copying selected files to '$DEST_DIR'..."
while IFS= read -r FILE; do
    DEST_NAME=$(handle_name_collision "$FILE" "$DEST_DIR")
    DEST_PATH="$DEST_DIR/$DEST_NAME"
    if cp "$FILE" "$DEST_PATH"; then
        echo "Successfully copied '$FILE' to '$DEST_PATH'."
        echo "$DEST_PATH" >> "$COPIED_LOG"
    else
        echo "Failed to copy '$FILE'. Please check your permissions or path."
    fi
done <<< "$SELECTED_FILES"

echo "File copying complete. Logs saved to '$COPIED_LOG'."

