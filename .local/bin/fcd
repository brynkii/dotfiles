#!/bin/bash

# Temporary file to store the selected directory
TEMP_FILE="/tmp/fzf_selected_dir"
HIST_FILE="$HOME/.local/share/fcd/fcd.history"
EXCLUDE_FILE="$HOME/.local/share/fcd/fcd.exclude"

# Ensure necessary files exist
touch "$HIST_FILE"
touch "$EXCLUDE_FILE"

# Function to generate exclude arguments for find
generate_exclude_args() {
    while read -r line; do
        echo "-not -path '$line'"
    done < "$EXCLUDE_FILE"
}

# Function to dynamically switch between search modes
dynamic_search() {
    find "$HOME" -type d $(generate_exclude_args) 2>/dev/null | \
    fzf --prompt="Home Search: Select a directory: " \
        --height=20 --reverse \
        --preview 'eza -l --tree --total-size --color=always --no-time --no-permissions --no-user {}' \
        --bind "ctrl-h:reload(cat '$HIST_FILE' | sort -u)" \
        --bind 'ctrl-r:reload(find / -maxdepth 5 -type d 2>/dev/null)' \
        --header 'Ctrl-H: History | Ctrl-R: Root Search | Default: Home Search'
}

# Function to clean up history
cleanup_history() {
    echo "Cleaning up history file..."
    local temp_file=$(mktemp)
    while read -r dir; do
        if [[ -d "$dir" ]]; then
            echo "$dir" >> "$temp_file"
        fi
    done < "$HIST_FILE"
    mv "$temp_file" "$HIST_FILE"
    echo "History cleanup complete."
}

# Function to display statistics
show_statistics() {
    local total_dirs=$(wc -l < "$HIST_FILE")
    local unique_dirs=$(sort -u "$HIST_FILE" | wc -l)
    echo "Total directories in history: $total_dirs"
    echo "Unique directories in history: $unique_dirs"
}

# Function to display help
show_help() {
    echo "Usage: $(basename "$0") [OPTION]"
    echo "Options:"
    echo "  --stats, -s          Show history statistics"
    echo "  --cleanup, -c        Clean up history file"
    echo "  --help, -h           Show this help message"
    echo "  [no option]          Default to dynamic directory search"
}

# Parse arguments
case "$1" in
    --cleanup|-c)
        cleanup_history
        exit 0
        ;;
    --stats|-s)
        show_statistics
        exit 0
        ;;
    --help|-h)
        show_help
        exit 0
        ;;
    *)
        SELECTED_DIR=$(dynamic_search)
        ;;
esac

# If a valid directory is selected, write to the temp file and append to history
if [[ -n "$SELECTED_DIR" ]]; then
    # Resolve the selected directory to an absolute path
    ABS_DIR=$(realpath "$SELECTED_DIR" 2>/dev/null)

    # Check if it is a valid, readable directory
    if [[ -d "$ABS_DIR" && -r "$ABS_DIR" ]]; then
        echo "$ABS_DIR" > "$TEMP_FILE"
        echo "$ABS_DIR" >> "$HIST_FILE"
    else
        echo "Invalid or inaccessible directory: $SELECTED_DIR"
        > "$TEMP_FILE"
    fi
else
    echo "No directory selected."
    > "$TEMP_FILE"
fi

