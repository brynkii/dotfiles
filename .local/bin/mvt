#!/bin/bash
# Move or copy files between tmux panes with color preview and full filename safety

set -euo pipefail

# Get active and target tmux panes
src_pane=$(tmux display-message -p "#D")
target_pane=$(tmux list-panes -F "#{pane_id}" | grep -v "${src_pane}" | fzf --prompt="Select target pane: ")

if [ -z "$target_pane" ] || ! tmux list-panes -F "#{pane_id}" | grep -q "$target_pane"; then
    echo "No valid target pane selected. Exiting."
    exit 1
fi

# Get source and target directories
src_dir=$(tmux display-message -p -F "#{pane_current_path}")
dest_dir=$(tmux display-message -p -t "$target_pane" -F "#{pane_current_path}")
cd "$src_dir" || exit 1

# Ask user to choose move or copy
action=$(printf "Move\nCopy" | fzf --prompt="Action: ")
if [ -z "$action" ]; then
    echo "No action selected. Exiting."
    exit 1
fi

# Determine command to use
cmd="mv"
[ "$action" = "Copy" ] && cmd="cp -r"

# Function for colorized file preview
color_preview_cmd() {
    if command -v eza &>/dev/null; then
        echo 'eza --color=always --all --oneline'
    elif ls --color=always &>/dev/null; then
        echo 'ls --color=always -1A'
    else
        echo 'find . -maxdepth 1 -mindepth 1 -printf "%f\n"'
    fi
}

# Use find -print0 to handle any filenames
IFS=$'\n' read -r -d '' -a selected_files < <(
    find . -mindepth 1 -maxdepth 1 -print0 | \
    fzf --multi --read0 --prompt="Select files to $action: " \
        --preview='file --mime "{}"' \
        --preview-window=down:3:wrap \
        --ansi --bind "ctrl-l:toggle-preview" --exit-0 | \
    tr '\0' '\n' && printf '\0'
)

# If nothing selected
if [ ${#selected_files[@]} -eq 0 ]; then
    echo "No files selected. Exiting."
    exit 1
fi

# Perform the copy or move
for rel_file in "${selected_files[@]}"; do
    clean_file="${rel_file#./}"
    src_path="$src_dir/$clean_file"
    dest_path="$dest_dir/$clean_file"

    if [ -e "$dest_path" ]; then
        read -rp "'$clean_file' exists in destination. Overwrite? [y/N]: " confirm
        [[ "$confirm" != [Yy] ]] && echo "Skipping $clean_file" && continue
    fi

    $cmd -- "$src_path" "$dest_path"
done

echo "Files ${action,,}d to $dest_dir"
