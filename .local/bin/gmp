#!/bin/bash

# Start timer
start_time=$(date +%s)

# Directory for storing logs
log_dir="$HOME/.local/share/gmp"
if ! mkdir -p "$log_dir" || ! touch "$log_dir/git_update_log.txt" "$log_dir/git_update_errors.log" "$log_dir/git_update_summary.txt" "$log_dir/successful_updates.txt" "$log_dir/failed_updates.txt"; then
    echo "$(date '+[%Y-%m-%d %H:%M:%S]') Error: Cannot create or write to log files in $log_dir. Aborting." >&2
    exit 1
fi

# Log file paths
log_file="$log_dir/git_update_log.txt"
error_log="$log_dir/git_update_errors.log"
summary_file="$log_dir/git_update_summary.txt"
success_file="$log_dir/successful_updates.txt"
failure_file="$log_dir/failed_updates.txt"
remote_urls_file="$log_dir/git_remote_urls.txt"
previous_scan_file="$log_dir/previous_scan.txt"

# List of directories to exclude
exclude_dirs=("$HOME/.local/share/Trash/*" "$HOME/Documents/akasha/*" "$HOME/.local/share/nvim/*")

# Convert the exclude list to find's `-path` format
exclude_args=()
for dir in "${exclude_dirs[@]}"; do
    exclude_args+=(-path "$dir" -o -path "$dir/*")
done

# Display help message
display_help() {
    echo "Usage: $0 [OPTION]"
    echo "Manage and update Git repositories."
    echo
    echo "Options:"
    echo "  -r    Recover missing directories using saved remote URLs."
    echo "  -s    Save Git remote URLs without updating repositories."
    echo "  -l    List all Git directories using fzf."
    echo "  -c    Check repository health."
    echo "  -h    Display this help message."
    echo
    echo "By default, the script will update all Git repositories."
}

# Check internet connectivity
check_internet() {
    echo "$(date '+[%Y-%m-%d %H:%M:%S]') Checking internet connectivity..." | tee -a "$log_file"
    if ! ping -c 1 github.com &>/dev/null; then
        echo "$(date '+[%Y-%m-%d %H:%M:%S]') Error: No internet connectivity. Aborting." | tee -a "$error_log"
        exit 1
    fi
    echo "$(date '+[%Y-%m-%d %H:%M:%S]') Internet connectivity is available." | tee -a "$log_file"
}

# Find all directories containing a .git folder, excluding specified ones
find_git_dirs() {
    local repos
    repos=$(find ~ \( "${exclude_args[@]}" \) -prune -o -type d -name ".git" -prune -exec dirname {} \;)

    # Filter out directories without a remote URL
    local valid_repos=()
    while IFS= read -r dir; do
        if git -C "$dir" remote get-url origin &>/dev/null; then
            valid_repos+=("$dir")
        else
            echo "$(date '+[%Y-%m-%d %H:%M:%S]') Ignoring directory without remote: $dir" | tee -a "$log_file"
        fi
    done <<< "$repos"

    # Print valid repositories
    printf '%s\n' "${valid_repos[@]}"
}

# Check repository health
check_repo_health() {
    local dir="$1"
    echo "$(date '+[%Y-%m-%d %H:%M:%S]') Checking health of repository in: $dir" | tee -a "$log_file"

    # Check for corrupted objects
    if ! git -C "$dir" fsck --no-progress &>/dev/null; then
        echo "$(date '+[%Y-%m-%d %H:%M:%S]') Error: Corrupted objects found in $dir." | tee -a "$error_log"
    fi

    # Check for uncommitted changes
    if [[ -n $(git -C "$dir" status --porcelain) ]]; then
        echo "$(date '+[%Y-%m-%d %H:%M:%S]') Warning: Uncommitted changes in $dir." | tee -a "$log_file"
    fi

    # Check for untracked files
    if [[ -n $(git -C "$dir" status --porcelain | grep '^??') ]]; then
        echo "$(date '+[%Y-%m-%d %H:%M:%S]') Warning: Untracked files in $dir." | tee -a "$log_file"
    fi

    # Check for stashed changes
    if [[ -n $(git -C "$dir" stash list) ]]; then
        echo "$(date '+[%Y-%m-%d %H:%M:%S]') Warning: Stashed changes in $dir." | tee -a "$log_file"
    fi

    # Check for merge conflicts
    if [[ -n $(git -C "$dir" status --porcelain | grep '^UU') ]]; then
        echo "$(date '+[%Y-%m-%d %H:%M:%S]') Error: Unresolved merge conflicts in $dir." | tee -a "$error_log"
    fi

    # Check for detached HEAD state
    if [[ -z $(git -C "$dir" branch --show-current) ]]; then
        echo "$(date '+[%Y-%m-%d %H:%M:%S]') Warning: Detached HEAD state in $dir." | tee -a "$log_file"
    fi

    # Check for submodules
    if [[ -n $(git -C "$dir" submodule status) ]]; then
        echo "$(date '+[%Y-%m-%d %H:%M:%S]') Info: Submodules found in $dir." | tee -a "$log_file"
    fi
}

# Save Git remote URLs to a file
save_remote_urls() {
    local dir="$1"
    local remote_url
    remote_url=$(git -C "$dir" remote get-url origin 2>/dev/null)
    if [[ -n "$remote_url" ]]; then
        echo "$dir:$remote_url" >> "$remote_urls_file"
    else
        echo "$(date '+[%Y-%m-%d %H:%M:%S]') Warning: No remote URL found for repository in $dir." | tee -a "$error_log"
    fi
}

# Export the save_remote_urls function
export -f save_remote_urls

# Perform git pull in a given directory with auto-retry
update_repo() {
    local dir="$1"
    echo "$(date '+[%Y-%m-%d %H:%M:%S]') Updating repository in: $dir" | tee -a "$log_file"

    if [[ ! -d "$dir" ]]; then
        echo "$(date '+[%Y-%m-%d %H:%M:%S]') Error: Directory $dir does not exist." | tee -a "$error_log"
        echo "$dir" >> "$failure_file"
        return 1
    fi

    for attempt in {1..3}; do
        {
            cd "$dir" || return 1
            if git pull; then
                echo "$(date '+[%Y-%m-%d %H:%M:%S]') Successfully updated repository in: $dir" | tee -a "$log_file"
                echo "$dir" >> "$success_file"
                save_remote_urls "$dir"
                return
            else
                echo "$(date '+[%Y-%m-%d %H:%M:%S]') Attempt $attempt failed for: $dir" | tee -a "$error_log"
            fi
        }
    done

    echo "$dir" >> "$failure_file"
}

# Compare current scan with the previous scan to find missing directories
highlight_missing_dirs() {
    if [[ -f "$previous_scan_file" ]]; then
        echo "$(date '+[%Y-%m-%d %H:%M:%S]') Checking for missing directories compared to the last scan..." | tee -a "$log_file"
        missing_dirs=$(comm -13 <(sort "$previous_scan_file") <(sort <(find_git_dirs)))

        if [[ -n "$missing_dirs" ]]; then
            echo "$(date '+[%Y-%m-%d %H:%M:%S]') Warning: The following directories are missing compared to the last scan:" | tee -a "$log_file" "$error_log"
            echo "$missing_dirs" | tee -a "$log_file" "$error_log"
        else
            echo "$(date '+[%Y-%m-%d %H:%M:%S]') No directories are missing compared to the last scan." | tee -a "$log_file"
        fi
    else
        echo "$(date '+[%Y-%m-%d %H:%M:%S]') No previous scan found. Skipping missing directory check." | tee -a "$log_file"
    fi
}

# Recover missing directories using saved remote URLs
recover_missing_dirs() {
    if [[ ! -f "$remote_urls_file" ]]; then
        echo "$(date '+[%Y-%m-%d %H:%M:%S]') Error: No remote URLs file found. Cannot recover missing directories." | tee -a "$error_log"
        exit 1
    fi

    # Get missing directories
    missing_dirs=$(comm -13 <(sort <(find_git_dirs)) <(sort "$previous_scan_file"))

    if [[ -z "$missing_dirs" ]]; then
        echo "$(date '+[%Y-%m-%d %H:%M:%S]') No missing directories found." | tee -a "$log_file"
        exit 0
    fi

    # Use fzf to select directories to recover
    selected_dirs=$(echo "$missing_dirs" | fzf --multi --prompt="Select directories to recover: ")

    if [[ -z "$selected_dirs" ]]; then
        echo "$(date '+[%Y-%m-%d %H:%M:%S]') No directories selected. Aborting recovery." | tee -a "$log_file"
        exit 0
    fi

    # Recover selected directories
    echo "$(date '+[%Y-%m-%d %H:%M:%S]') Recovering selected directories..." | tee -a "$log_file"
    while IFS= read -r dir; do
        remote_url=$(grep "^$dir:" "$remote_urls_file" | cut -d: -f2-)
        if [[ -n "$remote_url" ]]; then
            echo "$(date '+[%Y-%m-%d %H:%M:%S]') Cloning $remote_url into $dir..." | tee -a "$log_file"
            if git clone "$remote_url" "$dir"; then
                echo "$(date '+[%Y-%m-%d %H:%M:%S]') Successfully cloned $remote_url into $dir." | tee -a "$log_file"
            else
                echo "$(date '+[%Y-%m-%d %H:%M:%S]') Error: Failed to clone $remote_url into $dir." | tee -a "$error_log"
            fi
        else
            echo "$(date '+[%Y-%m-%d %H:%M:%S]') Error: No remote URL found for $dir." | tee -a "$error_log"
        fi
    done <<< "$selected_dirs"
}

# Save Git remote URLs without updating repositories
save_remote_urls_only() {
    echo "$(date '+[%Y-%m-%d %H:%M:%S]') Saving Git remote URLs..." | tee -a "$log_file"
    : > "$remote_urls_file" # Clear the remote URLs file

    local repos
    repos=$(find_git_dirs)
    if [[ -z "$repos" ]]; then
        echo "$(date '+[%Y-%m-%d %H:%M:%S]') No Git repositories found." | tee -a "$log_file"
        exit 0
    fi

    echo "$repos" | while IFS= read -r repo; do
        save_remote_urls "$repo"
    done

    echo "$(date '+[%Y-%m-%d %H:%M:%S]') Git remote URLs saved to $remote_urls_file." | tee -a "$log_file"
}

# List all Git directories using fzf
list_dirs() {
    local repos
    repos=$(find_git_dirs)
    if [[ -z "$repos" ]]; then
        echo "$(date '+[%Y-%m-%d %H:%M:%S]') No Git repositories found." | tee -a "$log_file"
        exit 0
    fi

    echo "$repos" | fzf --preview "eza -l --color=always {}" --prompt="Select a directory to preview: "
}

# Check health of all repositories
check_all_repos_health() {
    local repos
    repos=$(find_git_dirs)
    if [[ -z "$repos" ]]; then
        echo "$(date '+[%Y-%m-%d %H:%M:%S]') No Git repositories found." | tee -a "$log_file"
        exit 0
    fi

    echo "$(date '+[%Y-%m-%d %H:%M:%S]') Checking health of all repositories..." | tee -a "$log_file"
    while IFS= read -r repo; do
        check_repo_health "$repo"
    done <<< "$repos"
}

# Generate summary
summarize_results() {
    local success_count failure_count
    success_count=$(wc -l < "$success_file" | tr -d ' ')
    failure_count=$(wc -l < "$failure_file" | tr -d ' ')

    : > "$summary_file"
    echo "$(date '+[%Y-%m-%d %H:%M:%S]') Summary of Git Updates:" | tee -a "$summary_file"
    echo "------------------------" | tee -a "$summary_file"
    echo "Successful updates: $success_count" | tee -a "$summary_file"
    echo "Failed updates:     $failure_count" | tee -a "$summary_file"

    if [[ $success_count -gt 0 ]]; then
        echo "Successfully updated repositories:" | tee -a "$summary_file"
        tee -a "$summary_file" < "$success_file"
    fi

    if [[ $failure_count -gt 0 ]]; then
        echo "Repositories that failed to update:" | tee -a "$summary_file"
        tee -a "$summary_file" < "$failure_file"
    fi
}

# Main script
main() {
    # Clear previous logs and prepare summary files
    : > "$log_file"
    : > "$error_log"
    : > "$success_file"
    : > "$failure_file"
    : > "$remote_urls_file"

    check_internet

    echo "$(date '+[%Y-%m-%d %H:%M:%S]') Searching for Git repositories..." | tee -a "$log_file"
    local repos
    repos=$(find_git_dirs)

    if [[ -z "$repos" ]]; then
        echo "$(date '+[%Y-%m-%d %H:%M:%S]') No Git repositories found." | tee -a "$log_file"
        exit 0
    fi

    echo "$(date '+[%Y-%m-%d %H:%M:%S]') Found the following Git repositories (excluding specified directories):" | tee -a "$log_file"
    echo "$repos" | nl | tee -a "$log_file"

    # Save current scan for future comparison
    echo "$repos" > "$previous_scan_file"

    # Highlight missing directories compared to the last scan
    highlight_missing_dirs

    # Export the update function and log file paths for parallel
    export -f update_repo
    export log_file error_log success_file failure_file remote_urls_file

    # Update repositories in parallel and stream output
    echo "$(date '+[%Y-%m-%d %H:%M:%S]') Starting updates..." | tee -a "$log_file"
    if ! command -v parallel &>/dev/null; then
        echo "$(date '+[%Y-%m-%d %H:%M:%S]') Warning: GNU parallel is not installed. Running updates sequentially." | tee -a "$log_file"
        while IFS= read -r repo; do
            update_repo "$repo"
        done <<< "$repos"
    else
        echo "$repos" | parallel -j4 update_repo
    fi

    # Summarize results
    summarize_results

    # Calculate and display total elapsed time
    local end_time elapsed_time
    end_time=$(date +%s)
    elapsed_time=$((end_time - start_time))
    echo "$(date '+[%Y-%m-%d %H:%M:%S]') Total time taken: $((elapsed_time / 60)) minutes and $((elapsed_time % 60)) seconds." | tee -a "$summary_file" "$log_file"

    echo "$(date '+[%Y-%m-%d %H:%M:%S]') Update complete. Summary and logs are saved in $log_dir."
}

# Handle command-line arguments
case "$1" in
    -r)
        recover_missing_dirs
        ;;
    -s)
        save_remote_urls_only
        ;;
    -l)
        list_dirs
        ;;
    -c)
        check_all_repos_health
        ;;
    -h)
        display_help
        ;;
    *)
        main
        ;;
esac
